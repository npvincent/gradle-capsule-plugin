import java.nio.file.Files
import java.util.jar.JarFile

buildscript {
  dependencies {
    classpath fileTree('../../../build/libs')
  }
}

apply plugin: 'java'
apply plugin: 'us.kirchmeier.capsule'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
  mavenCentral()
}

dependencies {
  compile('org.apache.ant:ant:1.9.3') {
    exclude module: 'ant-launcher'
  }
  runtime 'junit:junit:4.11'
}

jar {
  baseName 'test-project'
}

ext.selfTest = task('self-test')

task fatCapsule(type: FatCapsule) {
  applicationClass 'com.foo.Main'
  classifier 'fat'
  buildTests(delegate, executable: false, fat: true)
}
task fatCapsuleExecutable(type: FatCapsule) {
  applicationClass 'com.foo.Main'
  classifier 'fatExec'
  reallyExecutable
  buildTests(delegate, executable: true, fat: true)
}

task mavenCapsule(type: MavenCapsule) {
  applicationClass 'com.foo.Main'
  classifier 'maven'
  buildTests(delegate, executable: false, maven: true)
}
task mavenCapsuleExecutable(type: MavenCapsule) {
  applicationClass 'com.foo.Main'
  classifier 'mavenExec'
  reallyExecutable { trampoline() }
  buildTests(delegate, executable: true, maven: true)
}

task platformCapsule(type: FatCapsule) {
  capsuleManifest {
    platform('macos') { applicationClass 'com.foo.Main' }
    platform('windows') { applicationClass 'com.foo.Main' }
    platform('linux') { applicationClass 'com.foo.Main' }
  }
  classifier 'platform'
  buildTests(delegate, executable: false, fat: true)
}

private void buildTests(Map options, Task t) {
  def name = t.name
  def f = t.outputs.files.singleFile
  t.capsuleManifest.applicationId = "com.foo.${name}".toString()

  project.task("test-output-$name", dependsOn: [t]) << {
    testOutput(f, options)
  }
  project.task("test-contents-$name", dependsOn: [t]) << {
    testContents(f, options)
  }
  selfTest.dependsOn.addAll([
      "test-output-$name",
      "test-contents-$name"
  ])
}

private void testOutput(f, options) {
  def cmd = options.executable ? [f.absolutePath] : ['java', '-Dcapsule.log2=ALL', '-jar', f.absolutePath]
  def env = System.getenv().collect{ k,v -> "$k=$v" }
  env << "CAPSULE_CACHE_DIR=${Files.createTempDirectory("gradle_capsule_test")}";
  def proc = cmd.execute(env, null)
  def out = new ByteArrayOutputStream()
  proc.consumeProcessOutput(out, System.err)
  int exitCode = proc.waitFor()
  def strOut = new String(out.toByteArray());
  assert strOut == 'Hello World\n'
  assert exitCode == 0
}

private void testContents(file, options) {
  def f = new JarFile(file, false)
  def capsuleClasses = 0
  def projectFiles = new ArrayList<String>()
  f.entries().each {
    if (it.name.startsWith('capsule/')) {
      capsuleClasses += 1
    } else {
      projectFiles << it.name
    }
  }

  projectFiles.sort()
  if (options.fat) {
    assert projectFiles == [
        'Capsule.class',
        'META-INF/',
        'META-INF/MANIFEST.MF',
        'ant-1.9.3.jar',
        'hamcrest-core-1.3.jar',
        'junit-4.11.jar',
        'test-project.jar',
    ]
  } else if (options.maven) {
//    assert projectFiles == [
//        'Capsule.class',
//        'META-INF/',
//        'META-INF/MANIFEST.MF',
//        'MavenCapsule.class',
//        'com/',
//        'com/foo/',
//        'com/foo/HelloWorld.class',
//        'com/foo/Main.class',
//    ]
  }

  if (options.fat) {
    assert capsuleClasses == 0
  } else if (options.maven) {
//    assert capsuleClasses > 1000
  }

  def jm = f.manifest.mainAttributes
  if (options.fat) {
    assert jm.size() == 4
  } else if (options.maven) {
    assert jm.size() == 6
    assert jm.getValue('Dependencies') == 'junit:junit:4.11 org.apache.ant:ant:1.9.3(*:ant-launcher)'
//    assert jm.getValue('Caplets') == 'MavenCapsule'
  }
  assert jm.getValue('Application-Id') ==~ /com\.foo\.\w+/
  assert jm.getValue('Manifest-Version') != null
  assert jm.getValue('Main-Class') == 'Capsule'
  assert jm.getValue('Application-Class') == 'com.foo.Main'

}
